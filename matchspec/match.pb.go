// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match.proto

package match

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MatchStartRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchStartRequest) Reset()         { *m = MatchStartRequest{} }
func (m *MatchStartRequest) String() string { return proto.CompactTextString(m) }
func (*MatchStartRequest) ProtoMessage()    {}
func (*MatchStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a39bbc00e119b00, []int{0}
}

func (m *MatchStartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchStartRequest.Unmarshal(m, b)
}
func (m *MatchStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchStartRequest.Marshal(b, m, deterministic)
}
func (m *MatchStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchStartRequest.Merge(m, src)
}
func (m *MatchStartRequest) XXX_Size() int {
	return xxx_messageInfo_MatchStartRequest.Size(m)
}
func (m *MatchStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MatchStartRequest proto.InternalMessageInfo

func (m *MatchStartRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MatchStartResponse struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchStartResponse) Reset()         { *m = MatchStartResponse{} }
func (m *MatchStartResponse) String() string { return proto.CompactTextString(m) }
func (*MatchStartResponse) ProtoMessage()    {}
func (*MatchStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a39bbc00e119b00, []int{1}
}

func (m *MatchStartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchStartResponse.Unmarshal(m, b)
}
func (m *MatchStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchStartResponse.Marshal(b, m, deterministic)
}
func (m *MatchStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchStartResponse.Merge(m, src)
}
func (m *MatchStartResponse) XXX_Size() int {
	return xxx_messageInfo_MatchStartResponse.Size(m)
}
func (m *MatchStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MatchStartResponse proto.InternalMessageInfo

func (m *MatchStartResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type MatchResultMessage struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ConnectToIp          string   `protobuf:"bytes,2,opt,name=connectToIp,proto3" json:"connectToIp,omitempty"`
	Result               int32    `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchResultMessage) Reset()         { *m = MatchResultMessage{} }
func (m *MatchResultMessage) String() string { return proto.CompactTextString(m) }
func (*MatchResultMessage) ProtoMessage()    {}
func (*MatchResultMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a39bbc00e119b00, []int{2}
}

func (m *MatchResultMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchResultMessage.Unmarshal(m, b)
}
func (m *MatchResultMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchResultMessage.Marshal(b, m, deterministic)
}
func (m *MatchResultMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchResultMessage.Merge(m, src)
}
func (m *MatchResultMessage) XXX_Size() int {
	return xxx_messageInfo_MatchResultMessage.Size(m)
}
func (m *MatchResultMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchResultMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MatchResultMessage proto.InternalMessageInfo

func (m *MatchResultMessage) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MatchResultMessage) GetConnectToIp() string {
	if m != nil {
		return m.ConnectToIp
	}
	return ""
}

func (m *MatchResultMessage) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type MatchResultRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchResultRequest) Reset()         { *m = MatchResultRequest{} }
func (m *MatchResultRequest) String() string { return proto.CompactTextString(m) }
func (*MatchResultRequest) ProtoMessage()    {}
func (*MatchResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a39bbc00e119b00, []int{3}
}

func (m *MatchResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchResultRequest.Unmarshal(m, b)
}
func (m *MatchResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchResultRequest.Marshal(b, m, deterministic)
}
func (m *MatchResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchResultRequest.Merge(m, src)
}
func (m *MatchResultRequest) XXX_Size() int {
	return xxx_messageInfo_MatchResultRequest.Size(m)
}
func (m *MatchResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MatchResultRequest proto.InternalMessageInfo

type MatchResultResponse struct {
	ResultMessage        *MatchResultMessage `protobuf:"bytes,1,opt,name=resultMessage,proto3" json:"resultMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MatchResultResponse) Reset()         { *m = MatchResultResponse{} }
func (m *MatchResultResponse) String() string { return proto.CompactTextString(m) }
func (*MatchResultResponse) ProtoMessage()    {}
func (*MatchResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a39bbc00e119b00, []int{4}
}

func (m *MatchResultResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchResultResponse.Unmarshal(m, b)
}
func (m *MatchResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchResultResponse.Marshal(b, m, deterministic)
}
func (m *MatchResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchResultResponse.Merge(m, src)
}
func (m *MatchResultResponse) XXX_Size() int {
	return xxx_messageInfo_MatchResultResponse.Size(m)
}
func (m *MatchResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MatchResultResponse proto.InternalMessageInfo

func (m *MatchResultResponse) GetResultMessage() *MatchResultMessage {
	if m != nil {
		return m.ResultMessage
	}
	return nil
}

func init() {
	proto.RegisterType((*MatchStartRequest)(nil), "match.MatchStartRequest")
	proto.RegisterType((*MatchStartResponse)(nil), "match.MatchStartResponse")
	proto.RegisterType((*MatchResultMessage)(nil), "match.MatchResultMessage")
	proto.RegisterType((*MatchResultRequest)(nil), "match.MatchResultRequest")
	proto.RegisterType((*MatchResultResponse)(nil), "match.MatchResultResponse")
}

func init() { proto.RegisterFile("match.proto", fileDescriptor_4a39bbc00e119b00) }

var fileDescriptor_4a39bbc00e119b00 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0x50, 0x2b, 0xf5, 0x02, 0x48, 0x1c, 0x08, 0xa5, 0x15, 0x43, 0x64, 0x96, 0x4e,
	0x15, 0x0a, 0x0f, 0xc0, 0xc0, 0x42, 0x87, 0x2e, 0x06, 0xb1, 0x1b, 0xf7, 0x44, 0x23, 0x05, 0x3b,
	0xd8, 0x2e, 0x6f, 0xc3, 0xbb, 0x22, 0x1c, 0x47, 0x75, 0x44, 0xa4, 0x6e, 0xb9, 0xbb, 0xff, 0xfe,
	0xfb, 0xf2, 0x1b, 0xf2, 0x4f, 0xe9, 0xd5, 0x6e, 0xd5, 0x5a, 0xe3, 0x0d, 0x4e, 0x42, 0xc1, 0xef,
	0xe0, 0x72, 0xf3, 0xf7, 0xf1, 0xe2, 0xa5, 0xf5, 0x82, 0xbe, 0xf6, 0xe4, 0x3c, 0x5e, 0x40, 0x56,
	0x6f, 0x0b, 0x56, 0xb2, 0xe5, 0x4c, 0x64, 0xf5, 0x96, 0x57, 0x80, 0xa9, 0xc8, 0xb5, 0x46, 0x3b,
	0xc2, 0x5b, 0x98, 0xa9, 0x9d, 0xd4, 0x9a, 0x9a, 0x75, 0x2f, 0x3e, 0x34, 0x78, 0x13, 0x77, 0x04,
	0xb9, 0x7d, 0xe3, 0x37, 0xe4, 0x9c, 0xfc, 0x38, 0xb2, 0x83, 0x25, 0xe4, 0xca, 0x68, 0x4d, 0xca,
	0xbf, 0x9a, 0x75, 0x5b, 0x64, 0x61, 0x9e, 0xb6, 0xf0, 0x06, 0xa6, 0x36, 0x18, 0x16, 0xa7, 0x25,
	0x5b, 0x4e, 0x44, 0xac, 0xf8, 0xf5, 0xe0, 0x5a, 0xfc, 0x0f, 0xfe, 0x06, 0x57, 0x83, 0x6e, 0x04,
	0x7f, 0x84, 0x73, 0x9b, 0x52, 0x05, 0x90, 0xbc, 0x9a, 0xaf, 0xba, 0x7c, 0xfe, 0x63, 0x8b, 0xa1,
	0xbe, 0xfa, 0x61, 0x70, 0xd6, 0x05, 0x42, 0xf6, 0xbb, 0x56, 0x84, 0x4f, 0x00, 0x87, 0x80, 0xb0,
	0x48, 0x8d, 0xd2, 0x60, 0x17, 0xf3, 0x91, 0x49, 0x07, 0xc5, 0x4f, 0xf0, 0x19, 0xf2, 0xe4, 0x34,
	0x8e, 0xe0, 0xf4, 0x36, 0x8b, 0xb1, 0x51, 0xef, 0x73, 0xcf, 0xde, 0xa7, 0xe1, 0x89, 0x1f, 0x7e,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x4a, 0x3d, 0x7e, 0xf1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MatchServiceClient interface {
	//
	MatchStart(ctx context.Context, in *MatchStartRequest, opts ...grpc.CallOption) (*MatchStartResponse, error)
	//
	MatchResult(ctx context.Context, in *MatchResultRequest, opts ...grpc.CallOption) (MatchService_MatchResultClient, error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) MatchStart(ctx context.Context, in *MatchStartRequest, opts ...grpc.CallOption) (*MatchStartResponse, error) {
	out := new(MatchStartResponse)
	err := c.cc.Invoke(ctx, "/match.MatchService/MatchStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) MatchResult(ctx context.Context, in *MatchResultRequest, opts ...grpc.CallOption) (MatchService_MatchResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MatchService_serviceDesc.Streams[0], "/match.MatchService/MatchResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchServiceMatchResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MatchService_MatchResultClient interface {
	Recv() (*MatchResultResponse, error)
	grpc.ClientStream
}

type matchServiceMatchResultClient struct {
	grpc.ClientStream
}

func (x *matchServiceMatchResultClient) Recv() (*MatchResultResponse, error) {
	m := new(MatchResultResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatchServiceServer is the server API for MatchService service.
type MatchServiceServer interface {
	//
	MatchStart(context.Context, *MatchStartRequest) (*MatchStartResponse, error)
	//
	MatchResult(*MatchResultRequest, MatchService_MatchResultServer) error
}

// UnimplementedMatchServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMatchServiceServer struct {
}

func (*UnimplementedMatchServiceServer) MatchStart(ctx context.Context, req *MatchStartRequest) (*MatchStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchStart not implemented")
}
func (*UnimplementedMatchServiceServer) MatchResult(req *MatchResultRequest, srv MatchService_MatchResultServer) error {
	return status.Errorf(codes.Unimplemented, "method MatchResult not implemented")
}

func RegisterMatchServiceServer(s *grpc.Server, srv MatchServiceServer) {
	s.RegisterService(&_MatchService_serviceDesc, srv)
}

func _MatchService_MatchStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).MatchStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchService/MatchStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).MatchStart(ctx, req.(*MatchStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_MatchResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MatchResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchServiceServer).MatchResult(m, &matchServiceMatchResultServer{stream})
}

type MatchService_MatchResultServer interface {
	Send(*MatchResultResponse) error
	grpc.ServerStream
}

type matchServiceMatchResultServer struct {
	grpc.ServerStream
}

func (x *matchServiceMatchResultServer) Send(m *MatchResultResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "match.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MatchStart",
			Handler:    _MatchService_MatchStart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MatchResult",
			Handler:       _MatchService_MatchResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "match.proto",
}
